show = function() {
print(self$chats)
},
greet = function() {
cat(paste0("Hello, my name is ", self$name, ".\n"))
}
)
)
Network$new(name = "asf",)
Network$new(name = "asf")
Network <- R6Class("Network",
public = list(
name = NULL,
token = NULL,
chats = new_chats(),
admin_inbox = new_admin_inbox(),
network_messages = new_network_messages(),
handlers = NULL,
sysadmin_username = NULL,
initialize =   function(name = "network",
token = get_spred_token(),
chats=new_chats(),
admin_inbox = new_admin_inbox(),
network_messages = new_network_messages(),
handlers = NULL,
sysadmin_username = "@mmmatin",...){
self$name = name
self$token = token
self$chats = chats
self$admin_inbox = admin_inbox
self$network_messages = network_messages
self$handlers = handlers
self$sysadmin_username = sysadmin_username
self$other <- list(...)}
,
show = function() {
print(self$chats)
},
greet = function() {
cat(paste0("Hello, my name is ", self$name, ".\n"))
}
)
)
Network$new(name = "asf")
Network$new(name = "asf")
Network <- R6Class("Network",
public = list(
name = NULL,
token = NULL,
chats = new_chats(),
admin_inbox = new_admin_inbox(),
network_messages = new_network_messages(),
handlers = NULL,
sysadmin_username = NULL,
other = NULL,
initialize = network_initialiser,
show = function() {
print(self$chats)
},
greet = function() {
cat(paste0("Hello, my name is ", self$name, ".\n"))
}
)
)
Network$new(name = "asf")
net_get<-function(attribute){
self[[attribute]]
}
name = NULL,
token = NULL,
chats = new_chats(),
admin_inbox = new_admin_inbox(),
network_messages = new_network_messages(),
handlers = NULL,
sysadmin_username = NULL,
other = NULL,
initialize = network_initialiser,
show = function() {
print(self$chats)
},
net_get = function(attribute){
self[[attribute]]
}
Network <- R6Class("Network",
public = list(
name = NULL,
token = NULL,
chats = new_chats(),
admin_inbox = new_admin_inbox(),
network_messages = new_network_messages(),
handlers = NULL,
sysadmin_username = NULL,
other = NULL,
initialize = network_initialiser,
show = function() {
print(self$chats)
},
net_get = function(attribute){
self[[attribute]]
},
greet = function() {
cat(paste0("Hello, my name is ", self$name, ".\n"))
}
)
)
Network$new(name = "asf")
net <- Network$new(name = "asf")
net$net_get()
net$net_get("hello")
net$net_get("name")
net$chats
self<-net
last(self$chats$role[self$chats$username==username])
username<-"@mmmatin"
last(self$chats$role[self$chats$username==username])
self$chats$role
self$chats
network$shared_messages
new_network_messages()
new_network_messages(a=10)
new_shared_messages()
network_initialiser <-
function(name = "network",
token = get_spred_token(),
chats=new_chats(),
admin_inbox = new_admin_inbox(),
bot_texts = new_network_messages(),
shared_updates = new_shared_messages(),
handlers = NULL,
sysadmin_username = "@mmmatin",
...){
self$name = name
self$token = token
self$chats = chats
self$admin_inbox = admin_inbox
self$bot_texts = bot_texts
self$shared_udpates = shared_updates
self$handlers = handlers
self$sysadmin_username = sysadmin_username
self$other <- list(...)
}
get_venue.title<-function(username){
self$chats$venue.title[self$chats$username==username]
}
get_role<-function(username){
self$chats$role[self$chats$username==username]
}
get_blocked<-function(username){
self$chats$blocked[self$chats$username==username]
}
get_shared_message<-function(global_message_id){
network$shared_messages
}
start_bot()
start_bot()
start_bot()
years<-10
years<-10
yearly_profit <- 25000
nplus1<-function(x){
x*1.03+yearly_profit
}
nplus1(0)
nplus1(nplus1(0))
nplus1(nplus1(nplus1(nplus1(nplus1(0)))))
nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(0))))))))))
nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(0)))))))))))))))
nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(nplus1(0))))))))))))))))))))
1,8*1,01
1.8*1,01
1.8*1.01
1.8*1.01^10
1.8*1.01^20
1.8*1.02^10
1.8*0,01
1.8*0.01
9*1,5
9*1.5
1.8*0.01
0.9*1.5
1.8*0.01
1.8*1.01
1.8*0.01
0.9*0.015
0.9*0.015/
1.8*0.01
0.9*0.015
1.8*0.01
0.9*0.015/
(1.8*0.01)
1,8*1,03*1,03*1,03*1,03*1,03*1,03
(1.8*1,03^10)
(1.8*1.03^10)
(1.8*1.03^20)
(1.8*1.03^20)*0,7
(1.8*1.03^20)*0.7
# to run from terminal in background:
# nohup Rscript main.R &
library(telegram.bot, warn.conflicts = F)
library(magrittr, warn.conflicts = F)
library(purrr, warn.conflicts = F)
library(dplyr, warn.conflicts = F)
library(geosphere,warn.conflicts = F)
library(stringr,warn.conflicts = F)
invisible(lapply(list.files("./functions",full.names = T),source))
# NETWORK SETUP -----------------------------------------------------------
token <- get_spred_token()
network_name = "Kritische Männlichkeit"
start_message = paste0("Hi, this is the *",network_name,"* local network! \n I'll forward Messages you send me to people near your homebase (and the other way around!).\nTo start, send me the location of a public place (cafe, bar, library, ...). That will be your homebase (you can change it anytime by sending me another location).\nIf you send messages here, other users in this network can see the message, along with your user name and your current homebase.")
rules = "Community rules:\n\n 1. Be respectful\n 2. No discrimination \n 3. No spam or off topic advertisement \n 4. no hate\n\nIf someone violates these rules, please /flag them."
command_explanations = "/rules - show network rules\n/flag - flag a user to the moderators\n/feedback - send feedback to moderators"
help = paste(start_message,"\n\n",command_explanations)
network_messages <- new_network_messages(
network_name = network_name,
start_message = start_message,
rules = rules,
command_explanations = command_explanations,
help = help
)
start_bot<-function(){
# handling pressed buttons:
query_handler <- CallbackQueryHandler(answer_cb)
handlers<-list(
handle_command_listen,
query_handler,
CommandHandler_text("start", help),
CommandHandler_text("help",help),
CommandHandler('flag',callback = flag_user),
CommandHandler_text('rules',rules),
CommandHandler('feedback',receive_feeback),
CommandHandler("block",block_user),
CommandHandler("unblock", unblock_user),
MessageHandler(set_homebase,MessageFilters$location),
MessageHandler(callback = handle_text_share_nearby, MessageFilters$text),
ErrorHandler(error_callback)
)
commands <- read.csv("data/commands.csv",stringsAsFactors = FALSE) %>% tibble
if(!exists("network")){
network <- new_network(
token = get_spred_token(),
chats = new_chats(),
sysadmin_username = "@mmmatin",
network_messages = network_messages,
handlers = handlers,
sysadmin_chat_id =  "-557669018", # not yet standard for network object
commands = commands,  # not yet standard for network object
blocked_users = character(),
update_log = list() # not yet standard for network object
)
}
network$handlers<-handlers
updater<-Updater(token = token)
updater <- purrr::reduce(c(updater,network$handlers), `+`)
updater$start_polling()
}
start_bot()
network
start_bot()
start_bot()
start_bot()
rm(network)
# to run from terminal in background:
# nohup Rscript main.R &
library(telegram.bot, warn.conflicts = F)
library(magrittr, warn.conflicts = F)
library(purrr, warn.conflicts = F)
library(dplyr, warn.conflicts = F)
library(geosphere,warn.conflicts = F)
library(stringr,warn.conflicts = F)
invisible(lapply(list.files("./functions",full.names = T),source))
# NETWORK SETUP -----------------------------------------------------------
token <- get_spred_token()
network_name = "Kritische Männlichkeit"
start_message = paste0("Hi, this is the *",network_name,"* local network! \n I'll forward Messages you send me to people near your homebase (and the other way around!).\nTo start, send me the location of a public place (cafe, bar, library, ...). That will be your homebase (you can change it anytime by sending me another location).\nIf you send messages here, other users in this network can see the message, along with your user name and your current homebase.")
rules = "Community rules:\n\n 1. Be respectful\n 2. No discrimination \n 3. No spam or off topic advertisement \n 4. no hate\n\nIf someone violates these rules, please /flag them."
command_explanations = "/rules - show network rules\n/flag - flag a user to the moderators\n/feedback - send feedback to moderators"
help = paste(start_message,"\n\n",command_explanations)
network_messages <- new_network_messages(
network_name = network_name,
start_message = start_message,
rules = rules,
command_explanations = command_explanations,
help = help
)
start_bot<-function(){
# handling pressed buttons:
query_handler <- CallbackQueryHandler(answer_cb)
handlers<-list(
handle_command_listen,
query_handler,
CommandHandler_text("start", help),
CommandHandler_text("help",help),
CommandHandler('flag',callback = flag_user),
CommandHandler_text('rules',rules),
CommandHandler('feedback',receive_feeback),
CommandHandler("block",block_user),
CommandHandler("unblock", unblock_user),
MessageHandler(set_homebase,MessageFilters$location),
MessageHandler(callback = handle_text_share_nearby, MessageFilters$text),
ErrorHandler(error_callback)
)
commands <- read.csv("data/commands.csv",stringsAsFactors = FALSE) %>% tibble
if(!exists("network")){
network <- new_network(
token = get_spred_token(),
chats = new_chats(),
sysadmin_username = "@mmmatin",
network_messages = network_messages,
handlers = handlers,
sysadmin_chat_id =  "-557669018", # not yet standard for network object
commands = commands,  # not yet standard for network object
blocked_users = character(),
update_log = list() # not yet standard for network object
)
}
network$handlers<-handlers
updater<-Updater(token = token)
updater <- purrr::reduce(c(updater,network$handlers), `+`)
updater$start_polling()
}
start_bot()
source('~/spred/main.R')
network <- new_network(
token = get_spred_token(),
chats = new_chats(),
sysadmin_username = "@mmmatin",
network_messages = network_messages,
handlers = handlers,
sysadmin_chat_id =  "-557669018", # not yet standard for network object
commands = commands,  # not yet standard for network object
blocked_users = character(),
update_log = list() # not yet standard for network object
)
library(telegram.bot, warn.conflicts = F)
library(magrittr, warn.conflicts = F)
library(purrr, warn.conflicts = F)
library(dplyr, warn.conflicts = F)
library(geosphere,warn.conflicts = F)
library(stringr,warn.conflicts = F)
invisible(lapply(list.files("./functions",full.names = T),source))
token <- get_spred_token()
network_name = "Kritische Männlichkeit"
start_message = paste0("Hi, this is the *",network_name,"* local network! \n I'll forward Messages you send me to people near your homebase (and the other way around!).\nTo start, send me the location of a public place (cafe, bar, library, ...). That will be your homebase (you can change it anytime by sending me another location).\nIf you send messages here, other users in this network can see the message, along with your user name and your current homebase.")
rules = "Community rules:\n\n 1. Be respectful\n 2. No discrimination \n 3. No spam or off topic advertisement \n 4. no hate\n\nIf someone violates these rules, please /flag them."
command_explanations = "/rules - show network rules\n/flag - flag a user to the moderators\n/feedback - send feedback to moderators"
help = paste(start_message,"\n\n",command_explanations)
network_messages <- new_network_messages(
network_name = network_name,
start_message = start_message,
rules = rules,
command_explanations = command_explanations,
help = help
)
start_bot<-function(){
# handling pressed buttons:
query_handler <- CallbackQueryHandler(answer_cb)
handlers<-list(
handle_command_listen,
query_handler,
CommandHandler_text("start", help),
CommandHandler_text("help",help),
CommandHandler('flag',callback = flag_user),
CommandHandler_text('rules',rules),
CommandHandler('feedback',receive_feeback),
CommandHandler("block",block_user),
CommandHandler("unblock", unblock_user),
MessageHandler(set_homebase,MessageFilters$location),
MessageHandler(callback = handle_text_share_nearby, MessageFilters$text),
ErrorHandler(error_callback)
)
commands <- read.csv("data/commands.csv",stringsAsFactors = FALSE) %>% tibble
if(!exists("network")){
network <- new_network(
token = get_spred_token(),
chats = new_chats(),
sysadmin_username = "@mmmatin",
network_messages = network_messages,
handlers = handlers,
sysadmin_chat_id =  "-557669018", # not yet standard for network object
commands = commands,  # not yet standard for network object
blocked_users = character(),
update_log = list() # not yet standard for network object
)
}
network$handlers<-handlers
updater<-Updater(token = token)
updater <- purrr::reduce(c(updater,network$handlers), `+`)
updater$start_polling()
}
start_bot()
network <- new_network(
token = get_spred_token(),
chats = new_chats(),
sysadmin_username = "@mmmatin",
network_messages = network_messages,
handlers = handlers,
sysadmin_chat_id =  "-557669018", # not yet standard for network object
commands = commands,  # not yet standard for network object
blocked_users = character(),
update_log = list() # not yet standard for network object
)
start_bot()
new_chats()
debug(new_chats)
start_bot<-function(){
# handling pressed buttons:
query_handler <- CallbackQueryHandler(answer_cb)
handlers<-list(
handle_command_listen,
query_handler,
CommandHandler_text("start", help),
CommandHandler_text("help",help),
CommandHandler('flag',callback = flag_user),
CommandHandler_text('rules',rules),
CommandHandler('feedback',receive_feeback),
CommandHandler("block",block_user),
CommandHandler("unblock", unblock_user),
MessageHandler(set_homebase,MessageFilters$location),
MessageHandler(callback = handle_text_share_nearby, MessageFilters$text),
ErrorHandler(error_callback)
)
commands <- read.csv("data/commands.csv",stringsAsFactors = FALSE) %>% tibble
if(!exists("network")){
network <- new_network(
token = get_spred_token(),
chats = new_chats(),
sysadmin_username = "@mmmatin",
network_messages = network_messages,
handlers = handlers,
sysadmin_chat_id =  "-557669018", # not yet standard for network object
commands = commands,  # not yet standard for network object
blocked_users = character(),
update_log = list() # not yet standard for network object
)
}
network$handlers<-handlers
updater<-Updater(token = token)
updater <- purrr::reduce(c(updater,network$handlers), `+`)
updater$start_polling()
}
start_bot()
add_to
chats
chats
chats
tibble(
chat.id,
location.latitude,
location.longitude,
venue.title,
username,
blocked,
role,
listening_radius = listening_radius)
role
listening_radius
blocked
venue.title
location.longitude
location.latitude
chat.id
chats <- tibble(
chat.id,
location.latitude,
location.longitude,
venue.title,
username,
blocked,
role,
listening_radius = listening_radius)
chats
class(chats)
unclass(chats)
chats
traceback()
chats
str(chats)
print(chats)
chats$chat.id
chats$location.latitude
chats %>% as.data.frame()
chats %>% as_tibble()
chats$username
network$update_log %>% length
network$update_log[[2]]
network$update_log[[2]]$update$from_user_id()
network$update_log[[2]]$update$effective_user()
traceback()
network$update_log[[2]]$update$effective_user()
update <- network$update_log[[2]]
update
update<-update$update
update
update$effective_user()$username
network$update_log[[1]]
network$update_log[[1]]$update$effective_user()
username<-update$effective_user()$username
username
update$effective_chat()
user_name<-function(update){
username<-update$effective_user()$username
if(is.null(username)){
username<-paste(update$effective_chat()$first_name,update$effective_chat()$last_name)
}
username
}
tier_username
?sendMessage
update$effective_chat()
update$effective_chat()$id
update$effective_user()$username
is.null(update$effective_user()$username)
